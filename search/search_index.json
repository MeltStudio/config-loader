{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"@meltstudio/config-loader","text":"<p>\u26a0\ufe0f WARNING: This project is in beta, so some features may change in the future. Use at your own discretion</p>"},{"location":"#project-description","title":"Project Description","text":"<p>The Config Loader package is a powerful and user-friendly tool that simplifies the process of retrieving and collecting variables from one or multiple files for your project. It provides an efficient way to extract specific information from files and access those variables in your code. The result is a JSON object, making it easy to work with in various applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Retrieve and collect variables from one or multiple files in your project.</li> <li>YAML file support (support for other file types coming soon.)</li> <li>Data can also be retrieved from CLI or environment variables .</li> <li>Compatible with TypeScript/JavaScript environments, making it suitable for Node.js projects.</li> </ul>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Usage</li> <li>License</li> <li>Acknowledgements</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the project, you can use the following steps:</p> <ol> <li>Ensure that you have Node.js installed on your machine.</li> <li>Open a terminal or command prompt.</li> <li>Run the following command to install the project and its dependencies via npm:</li> </ol> <pre><code>$ npm install @meltstudio/config-loader\n</code></pre> <pre><code>$ yarn add @meltstudio/config-loader\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Here's an example of how to use the <code>@meltstudio/config-loader</code> package in a TypeScript project:</p> <pre><code>import path from \"path\";\n\nimport c from \"@meltstudio/config-loader\";\n\nconst run = (): void =&gt; {\n  const settings = c.schema({\n    version: c.string({ required: true, cli: true }),\n    website: {\n      title: c.string({ required: true }),\n      url: c.string({\n        required: false,\n        defaultValue: \"www.mywebsite.dev\",\n      }),\n      description: c.string({ required: true }),\n      isProduction: c.bool({ required: true }),\n    },\n    database: {\n      host: c.string({ required: true }),\n      port: c.number({ required: true }),\n      credentials: {\n        username: c.string(),\n        password: c.string(),\n      },\n    },\n    socialMedia: c.array({\n      required: true,\n      item: c.string({ required: true }),\n    }),\n    features: c.array({\n      required: true,\n      item: {\n        name: c.string(),\n        enabled: c.bool(),\n      },\n    }),\n  });\n  const config = settings.load({\n    env: false,\n    args: true,\n    files: path.join(__dirname, \"./config.yaml\"),\n  });\n  console.log(JSON.stringify(config, null, 2));\n};\n\nrun();\n</code></pre> <p>With a config.yaml file with the following contents:</p> <pre><code>version: 1.0.0\nwebsite:\n  title: My Website\n  description: A simple and elegant website\n  port: 3000\n  isProduction: false\n\ndatabase:\n  host: localhost\n  port: 5432\n  credentials:\n    username: admin\n    password: secret\n\nsocialMedia: [https://twitter.com/example, https://instagram.com/example]\n\nfeatures:\n  - name: Store\n    enabled: true\n  - name: Admin\n    enabled: false\n\napiKeys:\n  googleMaps: ${GOOGLE_MAPS_API_KEY}\n  sendGrid: ${SENDGRID_API_KEY}\n</code></pre> <p>The expected output would be:</p> <pre><code>{\n  \"version\": \"1.0.0\",\n  \"website\": {\n    \"title\": \"My Website\",\n    \"url\": \"www.mywebsite.dev\",\n    \"description\": \"A simple and elegant website\",\n    \"isProduction\": false\n  },\n  \"database\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"credentials\": {\n      \"username\": \"admin\",\n      \"password\": \"secret\"\n    }\n  },\n  \"socialMedia\": [\n    \"https://twitter.com/example\",\n    \"https://instagram.com/example\"\n  ],\n  \"features\": [\n    {\n      \"name\": \"Store\",\n      \"enabled\": true\n    },\n    {\n      \"name\": \"Admin\",\n      \"enabled\": false\n    }\n  ]\n}\n</code></pre> <p>You can try executing our example in your project by following these steps with the command:</p> <pre><code>yarn example:run\n</code></pre>"},{"location":"#usage-with-cli","title":"Usage with CLI","text":"<p>When using our package with cli, it is important to have the cli attribute set to true. This will allow values to be sent when running the package from the command line.</p> <pre><code>import path from \"path\";\n\nimport c from \"@meltstudio/config-loader\";\n\nconst run = (): void =&gt; {\n  const settings = c.schema({\n    version: c.string({\n      required: true,\n      cli: true, \ud83d\udc48\n    }),\n  });\n  const config = settings.load({\n    env: false,\n    args: true,\n    files: path.join(__dirname, \"./config.yaml\"),\n  });\n  console.log(JSON.stringify(config, null, 2));\n};\n\nrun();\n</code></pre> <p>To use it you need to send the property name on the command line with the new value</p> <pre><code>yarn example:run --version 2.0.0\n</code></pre> <p>Having the following config.yaml file:</p> <pre><code>version: 1.0.0\n</code></pre> <p>The expected output would be:</p> <pre><code>{\n  \"version\": \"2.0.0\"\n}\n</code></pre> <p>You can see that the CLI variable overrode the yaml file variable</p>"},{"location":"#usage-with-environment-variables","title":"Usage with Environment Variables","text":"<p>The Config Loader package allows you to use environment variables in your system configuration. You can specify variable names in your configuration and get them. To use this feature you need to set env: true</p> <pre><code>import path from \"path\";\n\nimport c from \"@meltstudio/config-loader\";\n\nconst run = (): void =&gt; {\n  const settings = c.schema({\n    database: {\n      host: c.string({ required: true }),\n      port: c.number({ required: true }),\n      credentials: {\n        username: c.string(),\n        password: c.string({\n          env: \"DB_PASSWORD\",\n          cli: true,\n        }),\n      },\n    },\n  });\n  const config = settings.load({\n    env: true, \ud83d\udc48\n    args: true,\n    files: path.join(__dirname, \"./config.yaml\"),\n  });\n  console.log(JSON.stringify(config, null, 2));\n};\n\nrun();\n</code></pre> <p>With the following config.yaml file:</p> <pre><code>database:\n  host: localhost\n  port: 5432\n  credentials:\n    username: admin\n    password: IGNORED_PASSWORD\n</code></pre> <pre><code>yarn example:run\n</code></pre> <p>If you have the environment variable <code>DB_PASSWORD=ENV_USED_PASSWORD</code>, the expected output would be:</p> <pre><code>{\n  \"database\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"credentials\": {\n      \"username\": \"admin\",\n      \"password\": \"ENV_USED_PASSWORD\"\n    }\n  }\n}\n</code></pre> <p>You can notice that the environment variable overrode the value in the config.yaml file</p>"},{"location":"#license","title":"License","text":"<p>This package is licensed under the Apache License 2.0. For more information, please see the LICENSE file.</p>"}]}